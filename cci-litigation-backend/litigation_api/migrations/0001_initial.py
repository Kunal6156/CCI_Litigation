# Generated by Django 5.0.1 on 2025-08-01 14:29

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import litigation_api.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('department_name', models.CharField(choices=[('Corporate Office', 'Corporate Office'), ('Tandur', 'Tandur'), ('Rajban', 'Rajban'), ('Bokajan', 'Bokajan'), ('Akaltara', 'Akaltara'), ('Mandhar', 'Mandhar'), ('Nayagaoun', 'Nayagaoun'), ('Adilabad', 'Adilabad'), ('Kurkunta', 'Kurkunta'), ('Delhi Grinding', 'Delhi Grinding'), ('Bhatinda Grinding', 'Bhatinda Grinding')], help_text='Department this user belongs to', max_length=50)),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('user', 'Regular User')], default='user', help_text='User role type', max_length=10)),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user has admin privileges')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number with country code', max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')])),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='cci_users_groups', related_query_name='cci_user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='cci_users_permissions', related_query_name='cci_user', to='auth.permission')),
            ],
            options={
                'verbose_name': 'CCI User',
                'verbose_name_plural': 'CCI Users',
                'ordering': ['department_name', 'username'],
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_type', models.CharField(choices=[('CS', 'CS - Civil Suit'), ('CRP', 'CRP - Civil Revision Petition'), ('CRA', 'CRA - Civil Revision Application'), ('WP', 'WP - Writ Petition'), ('SLP', 'SLP - Special Leave Petition'), ('CC', 'CC - Contempt Case'), ('MA', 'MA - Miscellaneous Application'), ('CA', 'CA - Civil Appeal'), ('Others', 'Others')], help_text='Case type (CS, WP, SLP, etc.)', max_length=10)),
                ('case_number', models.PositiveIntegerField(help_text='Case number (positive integer)', validators=[litigation_api.models.validate_case_number])),
                ('case_year', models.PositiveIntegerField(help_text='Case year (YYYY format)', validators=[litigation_api.models.validate_case_year])),
                ('date_of_filing', models.DateField(help_text='Date of filing/intimation (DD-MM-YYYY)')),
                ('pending_before_court', models.CharField(help_text='Court/Tribunal where case is pending', max_length=200)),
                ('party_petitioner', models.TextField(help_text='Petitioner/Applicant party details', max_length=1000)),
                ('party_respondent', models.TextField(help_text='Respondent party details', max_length=1000)),
                ('nature_of_claim', models.CharField(choices=[('Service', 'Service'), ('Labour', 'Labour'), ('Contractual', 'Contractual'), ('Property', 'Property'), ('Land', 'Land'), ('Criminal', 'Criminal'), ('Arbitration', 'Arbitration'), ('Others', 'Others')], help_text='Nature of legal claim', max_length=50)),
                ('advocate_name', models.CharField(help_text="Advocate's full name", max_length=200)),
                ('advocate_email', models.EmailField(help_text="Advocate's email address", max_length=254)),
                ('advocate_mobile', models.CharField(help_text="Advocate's 10-digit mobile number", max_length=10, validators=[litigation_api.models.validate_mobile_number])),
                ('financial_implications', models.DecimalField(blank=True, decimal_places=2, help_text='Financial amount in Rs. (Indian format)', max_digits=15, null=True)),
                ('internal_department', models.CharField(choices=[('Corporate Office', 'Corporate Office'), ('Tandur', 'Tandur'), ('Rajban', 'Rajban'), ('Bokajan', 'Bokajan'), ('Akaltara', 'Akaltara'), ('Mandhar', 'Mandhar'), ('Nayagaoun', 'Nayagaoun'), ('Adilabad', 'Adilabad'), ('Kurkunta', 'Kurkunta'), ('Delhi Grinding', 'Delhi Grinding'), ('Bhatinda Grinding', 'Bhatinda Grinding')], help_text='Internal CCI department handling the case', max_length=50)),
                ('last_hearing_date', models.DateField(blank=True, help_text='Last hearing date (DD-MM-YYYY)', null=True)),
                ('next_hearing_date', models.DateField(blank=True, help_text='Next hearing date (DD-MM-YYYY)', null=True)),
                ('brief_description', models.TextField(help_text='Brief description of the matter (max 2500 characters)', max_length=2500)),
                ('relief_claimed', models.TextField(help_text='Relief claimed by party (max 500 characters)', max_length=500)),
                ('present_status', models.TextField(help_text='Present status of the case (max 500 characters)', max_length=500)),
                ('case_remarks', models.TextField(blank=True, help_text='Additional remarks (max 500 characters)', max_length=500, null=True)),
                ('case_id', models.CharField(editable=False, help_text='Auto-generated case ID (Type/Number/Year)', max_length=50, unique=True)),
                ('is_auto_saved', models.BooleanField(default=False, help_text='Whether this is an auto-saved draft')),
                ('auto_save_timestamp', models.DateTimeField(blank=True, help_text='Last auto-save timestamp', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_cases', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(blank=True, help_text='User who last updated this case', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_cases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Litigation Case',
                'verbose_name_plural': 'Litigation Cases',
                'ordering': ['-case_year', '-case_number'],
            },
        ),
        migrations.CreateModel(
            name='CaseAutoSave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_data', models.JSONField(help_text='Auto-saved case form data')),
                ('case_id', models.CharField(blank=True, help_text='Case ID if editing existing case', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auto_saved_cases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CaseNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(help_text='Case note/comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_internal', models.BooleanField(default=True, help_text='Internal note (not visible to external parties)')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='litigation_api.case')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_notes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email')], max_length=10)),
                ('recipient', models.CharField(help_text='Phone number or email address', max_length=200)),
                ('message_content', models.TextField(help_text='Notification message content')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=10)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='litigation_api.case')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLoginHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Login History',
                'verbose_name_plural': 'Login Histories',
                'ordering': ['-login_time'],
            },
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['internal_department'], name='litigation__interna_5bbdbc_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_type', 'case_year'], name='litigation__case_ty_93c245_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['date_of_filing'], name='litigation__date_of_3872dc_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['next_hearing_date'], name='litigation__next_he_e9696e_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['created_by'], name='litigation__created_ad13f6_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_id'], name='litigation__case_id_0497c7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='case',
            unique_together={('case_type', 'case_number', 'case_year')},
        ),
        migrations.AlterUniqueTogether(
            name='caseautosave',
            unique_together={('user', 'case_id')},
        ),
    ]
